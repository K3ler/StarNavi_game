{"version":3,"sources":["components/LeaderList/index.module.sass","components/Message/index.module.sass","components/LeaderList/Item/index.module.sass","components/UIBlock/index.module.sass","container/App/index.module.sass","components/Map/index.module.sass","components/Controls/GameDifficult/index.module.sass","components/Controls/Username/index.module.sass","components/Controls/PlayButton/index.module.sass","components/Map/Cells/index.module.sass","components/Controls/index.module.sass","serviceWorker.ts","redux/constraint.tsx","redux/reducer/Map/index.tsx","redux/reducer/Player/index.tsx","redux/reducer/LeaderBoard/index.tsx","redux/index.tsx","components/Map/Cell/index.tsx","components/Map/Cells/index.tsx","redux/actions/mapActions.tsx","api/index.tsx","redux/actions/leaderActions.tsx","redux/actions/playerActions.tsx","components/Map/index.tsx","components/Controls/GameDifficult/index.tsx","components/Controls/Username/index.tsx","redux/actions/indexActions.tsx","components/Controls/PlayButton/index.tsx","components/Controls/index.tsx","components/LeaderList/Item/index.tsx","components/UIBlock/index.tsx","components/LeaderList/index.tsx","components/Message/index.tsx","container/App/index.tsx","index.tsx","components/Map/Cell/index.module.sass"],"names":["module","exports","Boolean","window","location","hostname","match","CELL","MAP","PLAYER","LEADERS","initialState","isGameRunning","cells","mapSize","modes","delay","currentDelay","prevCell","userScore","aiScore","userName","winner","leaders","bestScore","isLeadersStatus","combineReducers","map","state","action","type","payload","size","player","leaderBoard","Cell","props","clBase","value","cl","hightlight","user","ai","className","cell","onClick","click","y","x","Cells","cellsArray","row","key","handleClick","Fragment","changeDelay","changeValue","dispatch","getState","copyCells","JSON","parse","stringify","setGameMode","index","fieldSize","field","Array","fill","instance","axios","create","baseURL","timeout","getLeaders","cb","setLeadersStatus","resp","status","data","reverse","toast","error","get","then","setWinner","date","nowDate","Date","global","getDate","getMonth","getFullYear","hours","getHours","slice","minutes","getMinutes","dateString","push","setLeaders","post","headers","Map","useDispatch","useSelector","generateRandomCoords","Math","floor","random","isCellUsable","hightlightRandomCell","setPrevCell","checkWinnerScore","useEffect","limit","useInterval","mapCells","GameDifficult","wrapper","select","onChange","change","mode","name","Username","usernameControl","usernameInput","e","target","setUsername","placeholder","setGameSettigns","dataArray","keys","PlayButton","startGame","control","playButton","Controls","controls","modelIndex","parseInt","LeaderItem","leader","leaderItem","leaderName","leaderDate","UIBlock","block","show","loader","LeaderList","content","leaderTitle","leaderList","Message","message","hide","toUpperCase","App","app","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","container","store","createStore","rootReducer","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,QAAU,4BAA4B,YAAc,gCAAgC,WAAa,iC,mBCAzJD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,sBAAsB,KAAO,sBAAsB,OAAS,wBAAwB,aAAe,gC,mBCA/JD,EAAOC,QAAU,CAAC,WAAa,2B,mBCA/BD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,KAAO,sBAAsB,OAAS,0B,mBCAvFD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,UAAY,yB,mBCArDD,EAAOC,QAAU,CAAC,SAAW,wB,mBCA7BD,EAAOC,QAAU,CAAC,OAAS,gC,mBCA3BD,EAAOC,QAAU,CAAC,gBAAkB,kCAAkC,cAAgB,kC,mBCAtFD,EAAOC,QAAU,CAAC,WAAa,iC,mBCA/BD,EAAOC,QAAU,CAAC,IAAM,qB,mBCAxBD,EAAOC,QAAU,CAAC,SAAW,6B,gJCWTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iCClBOC,EAEG,EAFHA,EAGJ,EAHIA,EAIF,EAGEC,EACM,eADNA,EAEM,eAFNA,EAGM,eAHNA,EAIM,YAJNA,EAMI,cANJA,EAOM,gBAPNA,EAQO,iBARPA,EASO,YAGPC,EACM,eADNA,EAEO,iBAFPA,EAGK,eAHLA,EAIM,gBAJNA,EAKI,aAGJC,EACK,cADLA,EAEI,aAFJA,EAGK,cAHLA,EAIQ,iBC5BfC,EAAqB,CACvBC,eAAe,EACfC,MAAO,CACH,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEjBC,QAAS,EACTC,MAAO,GACPC,MAAO,KACPC,aAAc,KACdC,SAAU,CAAC,EAAG,ICdZP,EAAe,CACjBQ,UAAW,EACXC,QAAU,EACVC,SAAU,GACVC,OAAQ,ICHNX,EAA+B,CACjCY,QAAU,GACVC,UAAW,EACXC,iBAAiB,GCANC,cAAgB,CAC3BC,IHYQ,WAAwC,IAAvCC,EAAsC,uDAA9BjB,EAAckB,EAAgB,uCAE/C,OAAQA,EAAOC,MAEX,KAAKtB,EACD,OAAO,2BACAoB,GADP,IAEIf,MAAOgB,EAAOE,QAAQlB,MACtBC,QAASe,EAAOE,QAAQC,OAGhC,KAAKxB,EACD,OAAO,2BACAoB,GADP,IAEIZ,MAAOa,EAAOE,UAGtB,KAAKvB,EACD,OAAO,2BACAoB,GADP,IAEIf,MAAOgB,EAAOE,UAGtB,KAAKvB,EACD,OAAO,2BACAoB,GADP,IAEIV,SAAUW,EAAOE,UAGzB,KAAKvB,EACD,OAAO,2BACAoB,GADP,IAEIb,MAAOc,EAAOE,UAEtB,KAAKvB,EACD,OAAO,2BACAoB,GADP,IAEIX,aAAcY,EAAOE,QAAQf,MAC7BF,QAASe,EAAOE,QAAQjB,UAEhC,KAAKN,EACD,OAAO,2BACAoB,GADP,IAEIhB,cAAeiB,EAAOE,UAG9B,KAAKvB,EACD,MAAO,CACHI,eAAe,EACfC,MAAO,CACH,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEjBC,QAAS,EACTC,MAAO,GACPC,MAAO,KACPC,aAAc,KACdC,SAAU,CAAC,EAAG,IAGtB,QACI,OAAOU,IG3EfK,OFEW,WAAwC,IAAvCL,EAAsC,uDAA9BjB,EAAckB,EAAgB,uCAElD,OAAQA,EAAOC,MACX,KAAKrB,EACD,OAAO,2BACAmB,GADP,IAEIP,SAAUQ,EAAOE,UAEzB,KAAKtB,EACD,OAAO,2BACAmB,GADP,IAEIT,UAAYU,EAAOE,UAE3B,KAAKtB,EACD,OAAO,2BACAmB,GADP,IAEIR,QAASS,EAAOE,UAExB,KAAKtB,EACD,OAAO,2BACAmB,GADP,IAEIN,OAAQO,EAAOE,QAAQT,SAE/B,KAAKb,EACD,MAAO,CACHU,UAAW,EACXC,QAAS,EACTC,SAAU,GACVC,OAAQ,IAEhB,QACI,OAAOM,IEhCfM,YDAgB,WAAwC,IAAvCN,EAAsC,uDAA9BjB,EAAckB,EAAgB,uCAEvD,OAAQA,EAAOC,MACX,KAAKpB,EAKL,KAAKA,EACD,OAAO,2BACAkB,GADP,IAEIL,QAASM,EAAOE,UAExB,KAAKrB,EACD,OAAO,2BACAkB,GADP,IAEIH,gBAAiBI,EAAOE,UAGhC,QACI,OAAOH,M,2EEnBbO,EAAyB,SAACC,GAE5B,IAAIC,EAQJA,EANa,UAAQD,EAAME,QAAU/B,EAAiBgC,IAAGC,WAAa,IAE1D,UAASJ,EAAME,QAAU/B,EAAYgC,IAAGE,KAAO,IAEjD,UAAWL,EAAME,QAAU/B,EAAUgC,IAAGG,GAAK,IAQvD,OACI,wBAAIC,UAAS,UAAKJ,IAAGK,KAAR,YAAgBP,GAAUQ,QALvB,WAChBT,EAAMU,MAAMV,EAAMW,EAAGX,EAAMY,OCOpBC,EAxBiB,SAACb,GAG7B,IAAMc,EAAad,EAAMvB,MAAMc,KAAI,SAACwB,EAAKJ,GAAN,OAC/B,wBAAIJ,UAAWJ,IAAGY,IAAKC,IAAK,IAAML,GAE1BI,EAAIxB,KAAI,SAACiB,EAAMI,GAAP,OACJ,kBAAC,EAAD,CAAMD,EAAGA,EAAGC,EAAGA,EACTV,MAAOM,EACPE,MAAOV,EAAMiB,YACbD,IAAK,IAAML,EAAI,IAAMC,WAO3C,OACI,kBAAC,IAAMM,SAAP,KACKJ,I,QCPAK,EAAc,SAACvC,GAExB,MAAO,CACHe,QAASf,EACTc,KAAMtB,IAKDgD,EAAc,SAACT,EAAGC,EAAGV,GAE9B,OAAO,SAACmB,EAAUC,GAEd,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,UAAUJ,IAAW/B,IAAId,QACzD8C,EAAUZ,GAAGC,GAAKV,EAElBmB,EAAS,CACL1B,QAAS4B,EACT7B,KAAMtB,MAaLuD,EAAc,SAACC,GAExB,OAAO,SAACP,EAAUC,IAEC,IAAXM,IACAA,EAAQ,GAGZ,IArDyBhC,EAqDrBjB,EAAQ2C,IAAW/B,IAAIZ,MAAMiD,GAC7BhD,EAAQD,EAAMC,MACdiD,EAAYlD,EAAMmD,MAEtBT,EAAS,CACL1B,QAAS,CACLf,MAAOA,EACPF,QAASmD,GAEbnC,KAAMtB,IAGViD,GAjEyBzB,EAiECiC,EA7DvB,CACHlC,QAAS,CACLlB,MAJC,YAAOsD,MAAMnC,GAAMoC,KAAKD,MAAMnC,GAAMoC,KAAK,KAK1CpC,QAEJF,KAAMtB,O,QCXR6D,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,oDACTC,QAAS,M,OCCAC,EAAa,WAEtB,OAAO,SAACjB,GDIc,IAACkB,ECFnBlB,EAASmB,IAAiB,IDEPD,ECAJ,SAACE,GAEQ,MAAhBA,EAAKC,QAELrB,EAASmB,IAAiB,IAE1BnB,EAAS,CACL1B,QAAS8C,EAAKE,KAAKC,UACnBlD,KAAMpB,KAGVuE,IAAMC,MAAM,gCDVxBb,EAASc,IAAI,YAAYC,KAAKT,KCyBrBC,GAAmB,SAACE,GAE7B,MAAO,CACH/C,QAAS+C,EACThD,KAAMpB,ICbD2E,GAAY,SAAC/D,EAAgBgE,GACtC,OAAO,SAAC7B,EAAUC,GAEd,IFhBmBqB,EAAMJ,EEgBrBpD,EAAUqC,KAAKC,MAAMD,KAAKE,UAAUJ,IAAWxB,YAAYX,UAO3DgE,EAAU,IAAIC,KACdC,EAASF,EAAQG,UAAY,IANpB,CAAC,UAAW,WAAY,QACjC,QAAS,MAAO,OAAQ,OAAQ,SAChC,YAAa,UAAW,WAAY,YAIMH,EAAQI,YAAc,IAAMJ,EAAQK,cAE9EC,GAAS,IAAMN,EAAQO,YAAYC,OAAO,GAC1CC,GAAW,IAAMT,EAAQU,cAAcF,OAAO,GAC9CG,EAAa,UAAGL,EAAH,YAAYG,EAAZ,MAA0BP,EAG3ClE,EAAQyD,UACRzD,EAAQ4E,KAAK,CACT7E,SACAgE,KAAMY,IAEV3E,EAAQyD,UFpCWD,EEsCJ,CACX,OAAUzD,EACVgE,KAAMY,GFxCevB,EEyCtB,SAACE,GAAD,OAAUpB,ED5BK,SAAClC,GAEvB,MAAO,CACHQ,QAASR,EACTO,KAAMpB,GCwBgB0F,CAAWvB,EAAKE,KAAKC,aFxC/CX,EAASgC,KAAK,WAAYtB,EAAM,CAC5BuB,QAAS,CACL,eAAgB,sBAErBlB,KAAKT,GEsCJlB,EAAS,CACL1B,QAASR,EACTO,KAAMpB,IAGV+C,EAAS,CACL1B,QAAS,CACLT,SACAgE,KAAMY,GAEVpE,KAAMrB,M,SChDZ8F,GAAsB,SAACnE,GAGzB,IAAMqB,EAAW+C,cAEXxF,EAAQyF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMD,IAAIX,SAEzDH,EAAQ4F,aAAY,SAAC7E,GAAD,OAA2BA,EAAMD,IAAId,SAEzDC,EAAU2F,aAAY,SAAC7E,GAAD,OAA2BA,EAAMD,IAAIb,WAE3DI,EAAWuF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMD,IAAIT,YAG5DE,EAAUqF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMK,OAAOb,WAC9DD,EAAYsF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMK,OAAOd,aAChEE,EAAWoF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMK,OAAOZ,YAe/DqF,EAAuB,WAKzB,MAAO,CAHCC,KAAKC,MAAMD,KAAKE,UAAY/F,EAAU,EAAI,EAAI,IAAM,EACpD6F,KAAKC,MAAMD,KAAKE,UAAY/F,EAAU,EAAI,EAAI,IAAM,IAM1DgG,EAAe,SAAC/D,EAAGC,EAAGJ,GACxB,OACIA,EAAKG,GAAGC,KAAOzC,GACfqC,EAAKG,GAAGC,KAAOzC,GACfqC,EAAKG,GAAGC,KAAOzC,GASjBwG,EAAuB,WAIzB,IAHA,IAAIpD,EAAYC,KAAKC,MAAMD,KAAKE,UAAUjD,IADX,EAElB6F,IAFkB,mBAE1B3D,EAF0B,KAEvBC,EAFuB,MAIvB8D,EAAa/D,EAAGC,EAAGW,IAAY,CAAC,IAAD,EAC1B+C,IAD0B,mBAClC3D,EADkC,KAC/BC,EAD+B,KAIvCS,EAASD,EAAYT,EAAGC,EAAGzC,IAC3BkD,EJzCmB,SAACV,EAAWC,GACnC,MAAO,CACHjB,QAAS,CAACgB,EAAGC,GACblB,KAAMtB,GIsCGwG,CAAYjE,EAAGC,KAItBiE,EAAmB,WAAO,IAAD,cACd/F,EADc,GACtB6B,EADsB,KACnBC,EADmB,KAGvBnC,EAAMkC,GAAGC,KAAOzC,IAChBkD,EAASD,EAAYT,EAAGC,EAAGzC,IAC3BkD,EDrED,CACH1B,QCoEwBX,EAAU,EDnElCU,KAAMrB,MCgGV,OAxBAyG,qBAAU,WAEN,IAAIC,EAASrG,EAAUA,EAAW,EAE9BK,GAAagG,IACb1D,EAAS4B,GAAUhE,EAAU,IAAImE,OACjC/B,EAASF,EAAY,QAGrBnC,GAAW+F,IACX1D,EAAS4B,GAAU,WAAY,IAAIG,OACnC/B,EAASF,EAAY,UAG1B,CAACnC,EAASD,EAAWL,EAAS2C,EAAUpC,IAK3C+F,cAAY,WACRH,IACAF,MACD/F,GAGC,yBAAK2B,UAAWJ,IAAGZ,KACf,2BAAOgB,UAAWJ,IAAG8E,UACjB,gCACA,+BACI,kBAAC,EAAD,CAAOxG,MAAOA,EAAOwC,YAtFjB,SAACN,EAAGC,GAGhBnC,EAAMkC,GAAGC,KAAOzC,IAEhBkD,EAASD,EAAYT,EAAGC,EAAGzC,IAE3BkD,EDhCD,CACH1B,QC+B0BZ,EAAY,ED9BtCW,KAAMrB,Y,wCENR6G,GAA0C,SAAClF,GAG7C,IAAMrB,EAAQ0F,aAAY,SAAC7E,GAAD,OAA2BA,EAAMD,IAAIZ,SAE/D,OACA,yBAAK4B,UAAWJ,KAAGgF,SACf,4BAAQ5E,UAAWJ,KAAGiF,OAAQC,SAAUrF,EAAMsF,QAC1C,4BAAQpF,MAAM,MAAd,kBAEIvB,EAAMY,KAAI,SAACgG,EAAM3D,GAAP,OACN,4BAAQZ,IAAK,IAAIY,EAAO1B,MAAO0B,GAAQ2D,EAAKC,Y,oBCX1DC,GAAsB,WAExB,IAAMpE,EAAW+C,cACXnF,EAAWoF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMK,OAAOZ,YAQrE,OACI,yBAAKsB,UAAWJ,KAAGuF,iBACf,2BAAOnF,UAAWJ,KAAGwF,cACdN,SATS,SAACO,GACrB,IAAIJ,EAAOI,EAAEC,OAAO3F,MAEpBmB,EHdmB,SAACmE,GAExB,MAAO,CACH7F,QAAS6F,EACT9F,KAAMrB,GGUGyH,CAAYN,KAOVtF,MAAOjB,EACP8G,YAAY,qB,oBCtBlBC,GAAkB,WAE3B,OAAO,SAAC3E,GNCmB,IAACkB,IMAJ,SAACE,GAEjB,IAAIE,EAAgBF,EAAKE,KACrBsD,EAA2B,GAE/B,IAAK,IAAIC,KAAQvD,EACbA,EAAKuD,GAAL,KAAqBA,EACrBD,EAAUlC,KAAKpB,EAAKuD,IAGxB7E,EAAS,CACL1B,QAASsG,EACTvG,KAAMtB,KNXlB6D,EAASc,IAAI,kBAAkBC,KAAKT,KOMlC4D,GAAuB,WAGzB,IAAM3H,EAAgB6F,aAAY,SAAC7E,GAAD,OAA2BA,EAAMD,IAAIf,iBAEjEK,EAAgBwF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMD,IAAIV,gBAEjEI,EAAgBoF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMK,OAAOZ,YACpEoC,EAAgB+C,cAEhBgC,EAAY,WAGd,GAAI5H,EAOA,OALA6C,ERsDD,CACH3B,KAAMtB,IQrDFiD,EL2CD,CACH3B,KAAMrB,SK1CFgD,EAAS2E,MRwCO,IAAC9F,EQpCJ,KAAbjB,EAKCJ,GAMLwC,GRyBqBnB,GQzBE1B,ER0BpB,SAAC6C,GACJA,EAAS,CACL1B,QAASO,EACTR,KAAMtB,OQ1BViD,EAASF,EAAYtC,KARjBgE,IAAMC,MAAM,gCALZD,IAAMC,MAAM,0BAqBpB,OACI,yBAAKvC,UAAWJ,KAAGkG,SACf,4BAAQ9F,UAAWJ,KAAGmG,WAAY7F,QANrB,WACjB2F,MAOa5H,EAAyB,aAAT,UChD/B+H,GAAqB,WAEvB,IAAIlF,EAAW+C,cAQf,OACI,yBAAK7D,UAAWJ,KAAGqG,UACf,kBAAC,GAAD,CAAelB,OAPO,SAACM,GAC3B,IAAIa,EAAaC,SAASd,EAAEC,OAAO3F,OACnCmB,EAASM,EAAY8E,OAMjB,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,wCCtBNE,GAAuB,WAEzB,IAKMxH,EALYkF,aAAY,SAAC7E,GAAD,OAA4BA,EAAMM,YAAYX,WAKhDI,KAAI,SAACqH,EAAQhF,GACrC,OACI,wBAAIrB,UAAWJ,KAAG0G,WAAY7F,IAAK,KAAKY,GACpC,0BAAMrB,UAAWJ,KAAG2G,YAAaF,EAAO1H,QACxC,0BAAMqB,UAAWJ,KAAG4G,YAAaH,EAAO1D,UAMpD,OACI,kBAAC,IAAMhC,SAAP,KACK/B,I,oBCpBP6H,GAA8B,SAAChH,GAEjC,OACI,yBAAKO,UAAS,UAAKJ,KAAG8G,MAAR,YAAiBjH,EAAM0C,OAASvC,KAAG+G,KAAO,KACpD,yBAAK3G,UAAWJ,KAAGgH,QACf,8BACA,iCCHVC,GAAuB,WAEzB,IAAI/H,EAAkBgF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMM,YAAYT,mBAE/E,OACI,yBAAKkB,UAAWJ,KAAGgF,SACf,kBAAC,GAAD,CAASzC,OAAQrD,IACjB,yBAAKkB,UAAWJ,KAAGkH,SACf,wBAAI9G,UAAWJ,KAAGmH,aAAlB,gBAGA,wBAAI/G,UAAWJ,KAAGoH,YACd,kBAAC,GAAD,U,oBCfdC,GAA8B,WAEhC,IAAItI,EAASmF,aAAY,SAAC7E,GAAD,OAA2BA,EAAMK,OAAOX,UAEjE,OACI,yBAAKqB,UAAS,UAAKJ,KAAGsH,UAClB,wBAAIlH,UAAS,UAAiB,KAAXrB,EAAgBiB,KAAG+G,KAAO/G,KAAGuH,OAC5C,0BAAMnH,UAAWJ,KAAGjB,QAED,KAAXA,EAAA,UAAmBA,EAAOyI,cAA1B,UAAkD,OCsC3DC,GAnCO,WAEpB,IAAMvG,EAAW+C,cASjB,OAPAU,qBAAU,WAERzD,EAAS2E,MAET3E,EAASiB,OACR,CAACjB,IAGF,yBAAKd,UAAWJ,IAAG0H,KAGjB,kBAAC,IAAD,CAAgBC,SAAS,YACTC,UAAW,IACXC,iBAAe,EACfC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAkB,EAClBC,WAAS,EACTC,cAAY,IAC5B,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,yBAAK/H,UAAWJ,IAAGoI,WACjB,kBAAC,GAAD,MACA,kBAAC,GAAD,SC9BFC,GAAQC,YAAYC,EAAaC,YAAgBC,MAEvDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,GAAD,QAGJQ,SAASC,eAAe,SvBmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpG,MAAK,SAAAqG,GACJA,EAAaC,gBAEdC,OAAM,SAAAzG,GACL0G,QAAQ1G,MAAMA,EAAM2E,a,kBwBhJ5B7J,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAa,yBAAyB,KAAO,mBAAmB,GAAK,oB","file":"static/js/main.80849fee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"LeaderList_wrapper__2TeV-\",\"content\":\"LeaderList_content__wrDNd\",\"leaderTitle\":\"LeaderList_leaderTitle__2DSUL\",\"leaderList\":\"LeaderList_leaderList__WbY8C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__QN21A\",\"show\":\"Message_show__2019q\",\"hide\":\"Message_hide__2yHHQ\",\"winner\":\"Message_winner__1PtzN\",\"color_change\":\"Message_color_change__3uzBP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaderItem\":\"Item_leaderItem__2minK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"UIBlock_block__ZhK7u\",\"show\":\"UIBlock_show__3rU0k\",\"loader\":\"UIBlock_loader__3-ao_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1Ukov\",\"container\":\"App_container__1YWGW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapCells\":\"Map_mapCells__-O0sc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"GameDifficult_select__1umrE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usernameControl\":\"Username_usernameControl__3CLSx\",\"usernameInput\":\"Username_usernameInput__2pTbr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playButton\":\"PlayButton_playButton__lS0Oy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Cells_row__25T4W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__1EepC\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CELL = {\n    PLAIN: 0,\n    HIGHLIGHT : 1,\n    AI : 2,\n    USER : 3\n}\n\nexport const MAP = {\n    GENERATE_MAP : \"GENERATE_MAP\",\n    CHANGE_DELAY : \"CHANGE_DELAY\",\n    CHANGE_VALUE : \"CHANGE_VALUE\",\n    PREV_CELL    : \"PREV_CELL\",\n    SET_PREV_CELL : \"SET_PREV_CELL\",\n    SETUP_MODES: \"SETUP_MODES\",\n    SET_GAME_MODE: \"SET_GAME_MODE\",\n    SET_GAME_STATE: \"SET_GAME_STATE\",\n    RESET_MAP     : \"RESET_MAP\"\n}\n\nexport const PLAYER = {\n    SET_USERNAME : \"SET_USERNAME\",\n    SET_USER_SCORE: \"SET_USER_SCORE\",\n    SET_AI_SCORE: \"SET_AI_SCORE\",\n    RESET_PLAYERS: \"RESET_PLAYERS\",\n    SET_WINNER : \"SET_WINNER\"\n}\n\nexport const LEADERS = {\n    GET_LEADERS : \"GET_LEADERS\",\n    ADD_WINNER : \"ADD_WINNER\",\n    SET_LEADERS : \"SET_LEADERS\",\n    LEADERS_STATUS : \"LEADERS_STATUS\"\n}","import { TMap } from \"./type\"\nimport { MAP } from \"../../constraint\"\n\nconst initialState: TMap = {\n    isGameRunning: false,\n    cells: [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n    ],\n    mapSize: 5,\n    modes: [],\n    delay: null,\n    currentDelay: null,\n    prevCell: [0, 0],\n}\n\nconst Map = (state = initialState, action: any) => {\n\n    switch (action.type) {\n\n        case MAP.GENERATE_MAP:\n            return {\n                ...state,\n                cells: action.payload.cells,\n                mapSize: action.payload.size,\n            }\n\n        case MAP.CHANGE_DELAY:\n            return {\n                ...state,\n                delay: action.payload\n            }\n\n        case MAP.CHANGE_VALUE:\n            return {\n                ...state,\n                cells: action.payload\n            }\n\n        case MAP.PREV_CELL:\n            return {\n                ...state,\n                prevCell: action.payload\n            }\n\n        case MAP.SETUP_MODES:\n            return {\n                ...state,\n                modes: action.payload\n            }\n        case MAP.SET_GAME_MODE:\n            return {\n                ...state,\n                currentDelay: action.payload.delay,\n                mapSize: action.payload.mapSize\n            }\n        case MAP.SET_GAME_STATE:\n            return {\n                ...state,\n                isGameRunning: action.payload\n            }\n\n        case MAP.RESET_MAP:\n            return {\n                isGameRunning: false,\n                cells: [\n                    [0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0],\n                ],\n                mapSize: 5,\n                modes: [],\n                delay: null,\n                currentDelay: null,\n                prevCell: [0, 0],\n            }\n\n        default:\n            return state\n    }\n}\n\nexport { Map } ","import { PLAYER } from \"../../constraint\"\n\nconst initialState = {\n    userScore: 0,\n    aiScore : 0,\n    userName: '',\n    winner: '',\n\n}\n\nconst Player = (state = initialState, action: any) => {\n\n    switch (action.type) {\n        case PLAYER.SET_USERNAME:\n            return {\n                ...state,\n                userName: action.payload\n            }\n        case PLAYER.SET_USER_SCORE:\n            return {\n                ...state,\n                userScore : action.payload\n            }\n        case PLAYER.SET_AI_SCORE:\n            return {\n                ...state,\n                aiScore: action.payload\n            }\n        case PLAYER.SET_WINNER:\n            return {\n                ...state,\n                winner: action.payload.winner\n            }\n        case PLAYER.RESET_PLAYERS:\n            return {\n                userScore: 0,\n                aiScore: 0,\n                userName: '',\n                winner: ''\n            }\n        default:\n            return state\n    }\n}\n\nexport { Player } ","import { TLeaderBoard } from \"./type\";\nimport { LEADERS } from \"../../constraint\";\n\nconst initialState : TLeaderBoard  = {\n    leaders : [],\n    bestScore: 0,\n    isLeadersStatus: false\n}\n\nconst LeaderBoard = (state = initialState, action: any) => {\n\n    switch (action.type) {\n        case LEADERS.GET_LEADERS:\n            return {\n                ...state,\n                leaders : action.payload\n            }\n        case LEADERS.ADD_WINNER:\n            return {\n                ...state,\n                leaders: action.payload\n            }\n        case LEADERS.LEADERS_STATUS:\n            return {\n                ...state,\n                isLeadersStatus: action.payload\n            }\n        \n        default:\n            return state\n    }\n}\n\nexport { LeaderBoard } \n\n ","import { combineReducers } from 'redux'\nimport { Map } from './reducer/Map/'\nimport {Player} from './reducer/Player/'\nimport {LeaderBoard} from './reducer/LeaderBoard/'\n\n\nexport default combineReducers({\n    map: Map,\n    player: Player,\n    leaderBoard: LeaderBoard\n})","import React from 'react'\n\nimport cl from './index.module.sass'\n\n// Interface\nimport { ICell } from './interface'\n\n// Constraints\nimport { CELL } from '../../../redux/constraint'\n\nconst Cell : React.FC<ICell> = (props : ICell) => {\n\n    let clBase    = \"\"\n    // If CELL HAS 1, colored in Blue\n    const clHight   = `${props.value === CELL.HIGHLIGHT ? cl.hightlight : ''}`\n    // If CELL HAS 2, colored in Green\n    const clUser    = `${props.value === CELL.USER ? cl.user : ''}`\n    // If CELL HAS 3, colored in Red\n    const clAi      = `${props.value === CELL.AI ? cl.ai : ''}`\n    \n    clBase = clHight + clUser + clAi\n\n    const handleClick = () => {\n        props.click(props.y, props.x)\n    }\n\n    return (\n        <td className={`${cl.cell} ${clBase}`} onClick={handleClick}></td>\n    )\n}\n\nexport { Cell }","import React from 'react'\nimport cl from './index.module.sass'\n\nimport { Cell } from '../Cell'\nimport { ICells } from './interface'\n\nconst Cells: React.FC<ICells> = (props: ICells) => {\n\n    // Assembly Game Matrix\n    const cellsArray = props.cells.map((row, y) => (\n        <tr className={cl.row} key={\"a\" + y}>\n            {\n                row.map((cell, x) => (\n                    <Cell y={y} x={x}\n                          value={cell} \n                          click={props.handleClick}\n                          key={\"a\" + y + \"b\" + x} />\n                ))\n            }\n        </tr>\n    ))\n\n    // Then Render\n    return (\n        <React.Fragment>\n            {cellsArray}\n        </React.Fragment>\n    )\n}\n\nexport default Cells ","import { MAP } from \"../constraint\"\n\n\n// Generate Matrix with asociated arrays\nexport const generateMapField = (size: number) => {\n\n    let cells = [...Array(size).fill(Array(size).fill(0))]\n\n    return {\n        payload: {\n            cells,\n            size\n        },\n        type: MAP.GENERATE_MAP\n    }\n}\n\n// Change interval delay, that change game speed\nexport const changeDelay = (delay: number | null) => {\n\n    return {\n        payload: delay,\n        type: MAP.CHANGE_DELAY\n    }\n}\n\n// Change value in Array\nexport const changeValue = (y, x, value) => {\n\n    return (dispatch, getState) => {\n\n        let copyCells = JSON.parse(JSON.stringify(getState().map.cells))\n        copyCells[y][x] = value\n\n        dispatch({\n            payload: copyCells,\n            type: MAP.CHANGE_VALUE\n        })\n    }\n}\n\nexport const setPrevCell = (y: number, x: number) => {\n    return {\n        payload: [y, x],\n        type: MAP.PREV_CELL\n    }\n}\n\n// Setup game mode from dropdown menu\nexport const setGameMode = (index: number) => {\n\n    return (dispatch, getState) => {\n\n        if (index === -1) {\n            index = 0\n        }\n\n        let modes = getState().map.modes[index]\n        let delay = modes.delay\n        let fieldSize = modes.field\n\n        dispatch({\n            payload: {\n                delay: delay,\n                mapSize: fieldSize\n            },\n            type: MAP.SET_GAME_MODE\n        })\n\n        dispatch(generateMapField(fieldSize))\n    }\n}\n\nexport const setGameState = (value: boolean) => {\n    return (dispatch) => {\n        dispatch({\n            payload: value,\n            type: MAP.SET_GAME_STATE\n        })\n    }\n}\n\nexport const resetMap = () => {\n    return {\n        type: MAP.RESET_MAP\n    }\n}","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://starnavi-frontend-test-task.herokuapp.com',\n    timeout: 10000\n});\n\nexport const getGameSettings = (cb) => {\n    instance.get('/game-settings').then(cb)\n}\n\nexport const getLeaders = (cb) => {\n    instance.get('/winners').then(cb)\n}\n\nexport const sendWinner = (data, cb) => {\n    instance.post('/winners', data, {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then(cb)\n}","import * as api from '../../api'\nimport { LEADERS } from '../constraint'\nimport { toast } from 'react-toastify'\n\n// Get /winners endpoint and save to store\nexport const getLeaders = () => {\n\n    return (dispatch) => {\n\n        dispatch(setLeadersStatus(true))\n\n        api.getLeaders((resp) => {\n\n            if (resp.status === 200) {\n                \n                dispatch(setLeadersStatus(false))\n\n                dispatch({\n                    payload: resp.data.reverse(),\n                    type: LEADERS.GET_LEADERS\n                })\n            } else {\n                toast.error(\"Error, check our connection\")\n            }\n        })\n    }\n}\n// Update Leaders Board\nexport const setLeaders = (leaders: Array<{}>) => {\n\n    return {\n        payload: leaders,\n        type: LEADERS.SET_LEADERS\n    }\n\n}\n\nexport const setLeadersStatus = (status: boolean) => {\n\n    return {\n        payload: status,\n        type: LEADERS.LEADERS_STATUS\n    }\n}","import { PLAYER, LEADERS } from \"../constraint\"\nimport * as api from '../../api'\nimport { setLeaders } from \"./leaderActions\"\n\nexport const setUsername = (name: string) => {\n\n    return {\n        payload: name,\n        type: PLAYER.SET_USERNAME\n    }\n}\n\nexport const setUserScore = (score: number) => {\n\n    return {\n        payload: score,\n        type: PLAYER.SET_USER_SCORE\n    }\n}\n\nexport const setAiScore = (score: number) => {\n\n    return {\n        payload: score,\n        type: PLAYER.SET_AI_SCORE\n    }\n}\n\nexport const setWinner = (winner: string, date: Date) => {\n    return (dispatch, getState) => {\n\n        let leaders = JSON.parse(JSON.stringify(getState().leaderBoard.leaders))\n\n        var months = [\"January\", \"February\", \"March\",\n            \"April\", \"May\", \"June\", \"July\", \"August\",\n            \"September\", \"October\", \"November\", \"December\"\n        ];\n\n        let nowDate = new Date();\n        let global = nowDate.getDate() + \" \" + months[nowDate.getMonth()] + \" \" + nowDate.getFullYear();\n\n        let hours = (\"0\" + nowDate.getHours()).slice(-2);\n        let minutes = (\"0\" + nowDate.getMinutes()).slice(-2);\n        let dateString = `${hours}:${minutes}; ` + global\n\n\n        leaders.reverse()\n        leaders.push({\n            winner,\n            date: dateString\n        })\n        leaders.reverse()\n\n        api.sendWinner({\n            \"winner\": winner,\n            date: dateString\n        }, (resp) => dispatch(setLeaders(resp.data.reverse())))\n\n        dispatch({\n            payload: leaders,\n            type: LEADERS.ADD_WINNER\n        })\n\n        dispatch({\n            payload: {\n                winner,\n                date: dateString\n            },\n            type: PLAYER.SET_WINNER\n        })\n    }\n}\n\nexport const resetPlayers = () => {\n    return {\n        type: PLAYER.RESET_PLAYERS\n    }\n}","import React, { useEffect } from 'react'\nimport { IMap } from './interfaces'\n\nimport cl from './index.module.sass'\n\n// Components\nimport Cells from './Cells'\n\n// Actions\nimport { changeValue, setPrevCell, changeDelay } from '../../redux/actions/mapActions'\nimport { setUserScore, setAiScore, setWinner } from '../../redux/actions/playerActions'\n\n// Libs\nimport useInterval from '@use-it/interval';\nimport { useDispatch, useSelector, RootStateOrAny } from 'react-redux'\n\n// Contraints\nimport { CELL } from '../../redux/constraint'\n\n\nconst Map: React.FC<IMap> = (props: IMap) => {\n\n    // States\n    const dispatch = useDispatch();\n    // Get delay for Timer\n    const delay = useSelector((state: RootStateOrAny) => state.map.delay)\n    // Cells for Game Matrix\n    const cells = useSelector((state: RootStateOrAny) => state.map.cells)\n    // Get mapSize \n    const mapSize = useSelector((state: RootStateOrAny) => state.map.mapSize)\n    // Get prevent cell\n    const prevCell = useSelector((state: RootStateOrAny) => state.map.prevCell)\n\n    // Others \n    const aiScore = useSelector((state: RootStateOrAny) => state.player.aiScore)\n    const userScore = useSelector((state: RootStateOrAny) => state.player.userScore)\n    const userName = useSelector((state: RootStateOrAny) => state.player.userName)\n\n    // Handle click on Cell\n    const handleClick = (y, x) => {\n\n        // If Cell is Blue, then User get Score!\n        if (cells[y][x] === CELL.HIGHLIGHT) {\n            // Change array value\n            dispatch(changeValue(y, x, CELL.USER))\n            // Get Score!\n            dispatch(setUserScore(userScore + 1))\n        }\n    }\n\n    // Generate random coords for Matrix\n    const generateRandomCoords = () => {\n\n        let y = Math.floor(Math.random() * (mapSize - 1 - 0 + 1)) + 0;\n        let x = Math.floor(Math.random() * (mapSize - 1 - 0 + 1)) + 0;\n\n        return [y, x];\n    };\n\n    // Check if Cell on Coordneds is Usable\n    const isCellUsable = (y, x, cell) => {\n        if (\n            cell[y][x] !== CELL.HIGHLIGHT &&\n            cell[y][x] !== CELL.AI &&\n            cell[y][x] !== CELL.USER\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    // Get random coordneds and than colored them.\n    const hightlightRandomCell = () => {\n        let copyCells = JSON.parse(JSON.stringify(cells));\n        let [y, x] = generateRandomCoords();\n\n        while (!isCellUsable(y, x, copyCells)) {\n            [y, x] = generateRandomCoords();\n        }\n\n        dispatch(changeValue(y, x, CELL.HIGHLIGHT))\n        dispatch(setPrevCell(y, x))\n    };\n\n    // Check, if user fast enought\n    const checkWinnerScore = () => {\n        let [y, x] = prevCell\n\n        if (cells[y][x] === CELL.HIGHLIGHT) {\n            dispatch(changeValue(y, x, CELL.AI))\n            dispatch(setAiScore(aiScore + 1))\n        }\n    };\n\n    // Check if players get limit of (mapSize*mapSize) / 2\n    useEffect(() => {\n\n        let limit = (mapSize * mapSize) / 2;\n\n        if (userScore >= limit ) {\n            dispatch(setWinner(userName, new Date()))\n            dispatch(changeDelay(null))\n        } \n\n        if (aiScore >= limit) {\n            dispatch(setWinner(\"Computer\", new Date()))\n            dispatch(changeDelay(null))\n        }\n\n    }, [aiScore, userScore, mapSize, dispatch, userName])\n\n\n    // Here i stop, and start timer. \n    // Just change the delay varible\n    useInterval(() => {\n        checkWinnerScore()\n        hightlightRandomCell()\n    }, delay)\n\n    return (\n        <div className={cl.map}>\n            <table className={cl.mapCells}>\n                <thead />\n                <tbody>\n                    <Cells cells={cells} handleClick={handleClick} />\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport { Map }","import React from 'react'\n\nimport cl from './index.module.sass'\n\n// Interface\nimport { IGameDifficult } from './interface'\n\n// Libs\nimport { useSelector, RootStateOrAny } from 'react-redux'\n\nconst GameDifficult: React.FC<IGameDifficult> = (props: IGameDifficult) => {\n\n    // Get Game Mode\n    const modes = useSelector((state: RootStateOrAny) => state.map.modes)\n\n    return (\n    <div className={cl.wrapper}>\n        <select className={cl.select} onChange={props.change}>\n            <option value=\"-1\">Game Difficult</option>\n            {\n                modes.map((mode, index) => (\n                    <option key={\"f\"+index} value={index}>{mode.name}</option>\n                ))\n            }\n        </select>\n    </div>\n    )\n}\n\nexport { GameDifficult }","import React from 'react'\n\nimport cl from './index.module.sass'\n\n// Actions\nimport { setUsername } from '../../../redux/actions/playerActions'\n\n// Libs\nimport { useDispatch, useSelector, RootStateOrAny } from 'react-redux'\n\nconst Username : React.FC = () => {\n\n    const dispatch = useDispatch()\n    const userName = useSelector((state: RootStateOrAny) => state.player.userName)\n\n    const onChangeHandler = (e) => {\n        let name = e.target.value\n        // Set username from field\n        dispatch(setUsername(name))\n    }\n\n    return (\n        <div className={cl.usernameControl}>\n            <input className={cl.usernameInput}\n                   onChange={onChangeHandler}\n                   value={userName}\n                   placeholder=\"Enter Username\" />\n        </div>\n    )\n}\n\nexport { Username } ","import * as api from '../../api/'\nimport { MAP } from '../constraint'\n\n// Get /game-settings enpoint, and save to store\nexport const setGameSettigns = () => {\n\n    return (dispatch) => {\n        api.getGameSettings((resp) => {\n\n            let data : object = resp.data\n            let dataArray: Array<Object> = []\n\n            for( let keys in data) {\n                data[keys]['name'] = keys\n                dataArray.push(data[keys])\n            }\n            \n            dispatch({\n                payload: dataArray,\n                type: MAP.SETUP_MODES\n            })\n        })\n    }\n}","import React from 'react'\n\nimport cl from './index.module.sass'\n\n// Actions\nimport { resetPlayers } from '../../../redux/actions/playerActions';\nimport { setGameSettigns } from '../../../redux/actions/indexActions';\nimport { changeDelay, setGameState, resetMap } from '../../../redux/actions/mapActions'\n\n// Libs\nimport { useSelector, RootStateOrAny, useDispatch } from 'react-redux'\nimport { toast } from 'react-toastify';\n\n\nconst PlayButton: React.FC = () => {\n\n    // GameRunning flag\n    const isGameRunning = useSelector((state: RootStateOrAny) => state.map.isGameRunning)\n    // Current choisen delay in dropbox\n    const currentDelay  = useSelector((state: RootStateOrAny) => state.map.currentDelay)\n    // Current entered Username\n    const userName      = useSelector((state: RootStateOrAny) => state.player.userName)\n    const dispatch      = useDispatch()\n\n    const startGame = () => { \n\n        // When i click \"Play again\"\n        if (isGameRunning) {\n            // Reset Map settings\n            dispatch(resetMap())\n            // Reset players settings\n            dispatch(resetPlayers())\n            // Reset game settings\n            dispatch(setGameSettigns())\n            return \n        }\n        // Checks for errors\n        if (userName === '') {\n            toast.error(\"Please Enter Username\")\n            return;\n        }\n\n        if (!currentDelay) {\n            toast.error(\"Please select Game Difficult\")\n            return \n        }\n\n        // Run game, and set delay for useInterval function.\n        dispatch(setGameState(!isGameRunning))\n\n        // Null - not working, > 1 working\n        dispatch(changeDelay(currentDelay))\n    }\n\n\n    const clickHandler = () => {\n        startGame()\n    }\n\n    return (\n        <div className={cl.control}>\n            <button className={cl.playButton} onClick={clickHandler}>\n                {\n                    !isGameRunning ? \"Play\" : \"Play again\"\n                }\n            </button>\n        </div>\n    )\n}\n\nexport { PlayButton }","import React from 'react'\n\nimport cl from './index.module.sass'\n\n// Components\nimport { GameDifficult } from './GameDifficult'\nimport { Username } from './Username'\nimport { PlayButton } from './PlayButton'\n\n// Actions\nimport { setGameMode } from '../../redux/actions/mapActions'\n\n// Libs\nimport { useDispatch } from 'react-redux'\n\nconst Controls: React.FC = () => {\n\n    let dispatch = useDispatch()\n\n    // Change Game Mode - easy, normal, hard\n    const changeGameModeHangler = (e: any) => {\n        let modelIndex = parseInt(e.target.value)\n        dispatch(setGameMode(modelIndex))\n    }\n\n    return (\n        <div className={cl.controls}>\n            <GameDifficult change={changeGameModeHangler} />\n            <Username />\n            <PlayButton />\n        </div>\n    )\n}\n\nexport { Controls }","import React from 'react'\n\nimport cl from './index.module.sass'\n\n// Libs \nimport { useSelector, RootStateOrAny } from 'react-redux'\n\nconst LeaderItem: React.FC = () => {\n\n    let leadersList = useSelector((state : RootStateOrAny) => state.leaderBoard.leaders)\n\n\n\n    // Get all winners\n    const leaders = leadersList.map((leader, index) => {\n        return (\n            <li className={cl.leaderItem} key={\"ld\"+index}>\n                <span className={cl.leaderName}>{leader.winner}</span>\n                <span className={cl.leaderDate}>{leader.date}</span>\n            </li>\n        )\n    })\n    \n    // Render them\n    return (\n        <React.Fragment>\n            {leaders}\n        </React.Fragment>\n        )\n}\n\nexport { LeaderItem }","import React from 'react'\n\nimport cl from './index.module.sass'\nimport { IUIBlock } from './interface'\nimport { useSelector, RootStateOrAny } from 'react-redux'\n\nconst UIBlock: React.FC<IUIBlock> = (props: IUIBlock) => {\n\n    return (\n        <div className={`${cl.block} ${props.status ? cl.show : ''}`}>\n            <div className={cl.loader}>\n                <div></div>\n                <div></div>\n            </div>\n        </div>\n    )\n}\n\nexport { UIBlock }","import React from 'react'\n\nimport cl from './index.module.sass'\n\n// Components\nimport { LeaderItem } from './Item'\nimport { UIBlock } from '../UIBlock'\nimport { useSelector, RootStateOrAny } from 'react-redux'\n\nconst LeaderList: React.FC = () => {\n\n    let isLeadersStatus = useSelector((state: RootStateOrAny) => state.leaderBoard.isLeadersStatus)\n\n    return (\n        <div className={cl.wrapper}>\n            <UIBlock status={isLeadersStatus} />\n            <div className={cl.content}>\n                <h1 className={cl.leaderTitle}>\n                    Leader Board\n                    </h1>\n                <ul className={cl.leaderList}>\n                    <LeaderItem />\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport { LeaderList }","import React from 'react'\n\nimport cl from './index.module.sass'\nimport { IMessage } from './interface'\nimport { useSelector, RootStateOrAny } from 'react-redux'\n\nconst Message: React.FC<IMessage> = () => {\n\n    let winner = useSelector((state: RootStateOrAny) => state.player.winner)\n\n    return (\n        <div className={`${cl.message}`}>\n            <h1 className={`${ winner !== '' ? cl.show : cl.hide }`}>\n                <span className={cl.winner}>\n                    {\n                        winner !== '' ? `${winner.toUpperCase()} wins!` : ''\n                    }\n                </span>\n            </h1>\n        </div>\n    )\n}\n\nexport { Message }","import React, { useEffect } from 'react';\nimport cl from './index.module.sass';\n\n// Components\nimport { Map } from '../../components/Map/index'\nimport { Controls } from '../../components/Controls';\nimport { LeaderList } from '../../components/LeaderList';\nimport { Message } from '../../components/Message';\n\n// Actions\nimport { setGameSettigns } from '../../redux/actions/indexActions';\nimport { getLeaders } from '../../redux/actions/leaderActions';\n\n// Libs\nimport { useDispatch } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\n\n\nconst App: React.FC = () => {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    // Setup Game Settings\n    dispatch(setGameSettigns())\n    // Get Leaders\n    dispatch(getLeaders())\n  }, [dispatch])\n\n  return (\n    <div className={cl.app}>\n\n      {/* Popup message notifer  */}\n      <ToastContainer position=\"top-right\"\n                      autoClose={5000}\n                      hideProgressBar\n                      newestOnTop={false}\n                      closeOnClick\n                      rtl={false}\n                      pauseOnFocusLoss={false}\n                      draggable\n                      pauseOnHover />\n      <Controls />\n      <Message />\n      <div className={cl.container}>\n        <Map />\n        <LeaderList />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass'\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport rootReducer from './redux/index'\n\n\nimport App from './container/App';\n\nconst store = createStore(rootReducer, applyMiddleware(reduxThunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__2feTL\",\"hightlight\":\"Cell_hightlight__3IvAC\",\"user\":\"Cell_user__1P8f3\",\"ai\":\"Cell_ai__1yfVC\"};"],"sourceRoot":""}